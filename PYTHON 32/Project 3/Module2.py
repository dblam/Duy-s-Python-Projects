# Duy B. Lam
# 61502602
# Project 3

# A module that implements the various outputs.
# Each kind of output that can be generated by the
# program must be implemented as a separate class; see below.

import urllib.parse
import urllib.request
import json

class Output:
    
    def __init__(self):
        self.steps = []
        self.total_distance = float()
        self.total_time = float()
        self.lat_lng = []
        self.elevation = []

    def get_lat_lng(self):
        print('\nLATLONGS')
        for element in self.lat_lng:
            lat = element['lat'] #negative = S | positive = N
            lng = element['lng'] #negative = W | positive = E
            if lat < 0:
                print('{:.2f}S'.format(abs(lat)), end = ' ')
            else:
                print('{:.2f}N'.format(abs(lat)), end = ' ')
            if lng < 0:
                print('{:.2f}W'.format(abs(lng)))
            else:
                print('{:.2f}E'.format(abs(lng)))
    
    def get_total_time(self):
        print('\nTOTAL TIME: {:.0f} minutes'.format(self.total_time/60))
        
    def get_total_distance(self):
        print('\nTOTAL DISTANCE: {:.0f} miles'.format(self.total_distance))

    def get_steps(self):
        print('\nDIRECTIONS')
        for element in self.steps:
            print(element)
            
    def get_elevation(self):
        print('\nELEVATIONS')
        for element in self.elevation:
            print(int(round(element)))
##        
    def set_lat_long(self, mapquestResponse: dict) -> None:
        locationsList = mapquestResponse['route']['locations']
        i = 0
        returnList = []
        for location in locationsList:
            returnList.append(location['latLng'])
        self.lat_lng = returnList
        #print(self.lat_lng[:]) #Print to check function output
        
        
    def set_total_time(self, mapquestResponse: dict) -> None:
        totalTime = mapquestResponse['route']['time'] #dictionary holds integer
        self.total_time = (totalTime) 

    def set_total_distance(self, mapquestResponse: dict) -> None:
        totalDistance = (mapquestResponse['route']['distance']) #dictionary holds float
        self.total_distance = (totalDistance) 
        
    def set_steps(self, mapquestResponse: dict) -> None:
        steps = []
        stepsList = mapquestResponse['route']['legs']
        i = 0
        a = 0
        while (i < len(stepsList)):
            while a < len(stepsList[i]['maneuvers']):
                steps.append(stepsList[i]['maneuvers'][a]['narrative'])
                a += 1
            i += 1
        self.steps = steps
        #print(self.steps)

    def set_current_elevation(self, mapquestResponse: dict) -> None:
        latLngCollection = self.lat_lng
        baseURL = 'http://open.mapquestapi.com/elevation/v1/profile?'
        apiKey = 'AQxVbUQOzt0QG3CDPonPI0G7nGnKACOd'
        latLngCollectionString = ''
        urls = []
        for element in latLngCollection:
            latLngCollectionString += str(element['lat']) + ', '
            latLngCollectionString += str(element['lng'])
            parameters = [('key', apiKey),('latLngCollection', latLngCollectionString), ('unit', 'f')]
            elevationSearchURL = baseURL + urllib.parse.urlencode(parameters)
            urls.append(elevationSearchURL)
            latLngCollectionString = ''
        response=[]
        dictionary=[]
        for element in urls:
            try:
                responseIndiv = urllib.request.urlopen(element)
                stringResponse = responseIndiv.read().decode(encoding = 'utf-8')
                response.append(stringResponse)
                dictResponse = json.loads(stringResponse)
                dictionary.append(dictResponse)
            finally:
                responseIndiv.close()
        for element in dictionary:
            self.elevation.append(element['elevationProfile'][0]['height'])
        #print(self.elevation) -> print to double check list

    
        
